<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>snippets on Siddharth&#39;s Blog</title>
    <link>https://subsid.github.io/tags/snippets/</link>
    <description>Recent content in snippets on Siddharth&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Mar 2023 10:03:11 -0500</lastBuildDate><atom:link href="https://subsid.github.io/tags/snippets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python: Measure Time and Memory</title>
      <link>https://subsid.github.io/posts/2023-03-11-measure-time-and-memory-with-contextlib/</link>
      <pubDate>Sat, 11 Mar 2023 10:03:11 -0500</pubDate>
      
      <guid>https://subsid.github.io/posts/2023-03-11-measure-time-and-memory-with-contextlib/</guid>
      <description>When debugging, I often want to measure a piece of code&amp;#39;s performance/memory characteristics. I do this with the stdlib time class and psutil module.
These are some snippets I always have in my utils before starting a project.
Note: I use perf_counter (i.e performance counter clock) to measure time. For more details, see this.
Measuring time and memory I use python&amp;#39;s contextmanager to manage state. Realpython has a nice post on this.</description>
    </item>
    
    <item>
      <title>Logging in Python</title>
      <link>https://subsid.github.io/posts/2023-03-06-python-logging/</link>
      <pubDate>Mon, 06 Mar 2023 12:54:14 -0500</pubDate>
      
      <guid>https://subsid.github.io/posts/2023-03-06-python-logging/</guid>
      <description>Python does not come with reasonable logging defaults. The following code usually prints nothing.
import logging logging.info(&amp;#34;Hello world&amp;#34;) While it does provide `logging.basicConfig()` which kinda works (sets up stderr by default), I prefer setting this up myself.
This snippet sets up logging, adds a formatter and outputs error/info logs to the respective std streams.
Without setting up the filter for errors, log aggregators confuse a python error log with an info log.</description>
    </item>
    
  </channel>
</rss>
